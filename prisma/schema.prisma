// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                      String               @id @default(auto()) @map("_id") @db.ObjectId
  email                   String               @unique
  fullname                String
  status                  Status               @default(PENDING)
  verificationCode        String?
  verificationCodeExpires DateTime?
  refreshToken            String?
  current_password        String
  failedAttempts          Int                  @default(0)
  role                    Role                 @default(USER)
  date_of_birth           DateTime?
  age                     Int?
  license_number          String?              @unique
  phone                   String?              @unique
  departmentId            String?              @db.ObjectId
  department              Department?          @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  specialtyId             String?              @db.ObjectId
  specialty               Specialty?           @relation(fields: [specialtyId], references: [id], onDelete: SetNull)
  patientDemographics     PatientDemographics? @relation("UserPatientDemographics")
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  medicalRecords          MedicalRecord[]
}

model Department {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String                @unique
  users               Users[]
  specialties         Specialty[]
  patientDemographics PatientDemographics[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Specialty {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  departmentId        String                @db.ObjectId
  department          Department            @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  users               Users[]
  patientDemographics PatientDemographics[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@unique([name, departmentId])
}

model PatientDemographics {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @unique @db.ObjectId
  user          Users       @relation("UserPatientDemographics", fields: [userId], references: [id], onDelete: Cascade)
  fullName      String
  date_of_birth DateTime?
  age           Int?
  gender        String?
  phone         String?
  address       String?
  departmentId  String?     @db.ObjectId
  specialtyId   String?     @db.ObjectId
  department    Department? @relation(fields: [departmentId], references: [id])
  specialty     Specialty?  @relation(fields: [specialtyId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  patientHistory PatientHistory?
}

model PatientHistory {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  patientId       String              @unique @db.ObjectId
  patient         PatientDemographics @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicalRecords  MedicalRecord[] // entradas médicas o eventos clínicos
  allergies       String?
  chronicDiseases String?
  bloodType       String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model MedicalRecord {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  patientHistoryId String         @db.ObjectId
  patientHistory   PatientHistory @relation(fields: [patientHistoryId], references: [id], onDelete: Cascade)
  doctorId         String?        @db.ObjectId
  doctor           Users?         @relation(fields: [doctorId], references: [id], onDelete: SetNull)
  date             DateTime       @default(now())
  reasonForVisit   String?
  diagnosis        String
  treatment        String?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  email     String
  action    String // LOGIN, LOGOUT, 2FA, LOGIN_FAILED
  outcome   String // SUCCESS, FAILURE
  reason    String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileUploadLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String   @unique
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  ENFERMERO
  MEDICO
  PACIENTE
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
  LOCKED
}
