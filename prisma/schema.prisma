// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                      String          @id @default(auto()) @map("_id") @db.ObjectId
  email                   String          @unique
  fullname                String
  status                  String          @default("PENDING") // PENDING, ACTIVE, INACTIVE, LOCKED
  verificationCode        String?
  verificationCodeExpires DateTime?
  refreshToken            String?
  current_password        String
  failedAttempts          Int             @default(0)
  role                    Role            @default(USER)
  departmentId            String?         @db.ObjectId
  department              Department?     @relation(fields: [departmentId], references: [id])
  userSpecialties         UserSpecialty[]
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  date_of_birth  DateTime?
  license_number String?   @unique
  phone          String?   @unique
}

model Department {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  users       Users[]
  specialties Specialty[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Specialty {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  departmentId    String          @db.ObjectId
  department      Department      @relation(fields: [departmentId], references: [id])
  userSpecialties UserSpecialty[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([name, departmentId])
}

model UserSpecialty {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        Users     @relation(fields: [userId], references: [id])
  specialtyId String    @db.ObjectId
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  email     String
  action    String // LOGIN, LOGOUT, 2FA, LOGIN_FAILED
  outcome   String // SUCCESS, FAILURE
  reason    String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  ENFERMERO
  MEDICO
  PACIENTE
}
